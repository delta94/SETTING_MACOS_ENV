{
  //-----------------SNIPPETS FOR GATSBY-------------
  "const router = useRouter()": {
    "prefix": "useRouter",
    "body": ["const router = useRouter();"]
  },
  "const dispatch = useDispatch()": {
    "prefix": "dispatch",
    "body": ["const dispatch = useDispatch();"]
  },
  "Import react-redux": {
    "prefix": "redux",
    "body": ["import {useSelector, useDispatch } from 'react-redux'"]
  },
  "Create hooks": {
    "prefix": "chook",
    "body": [
      "import { useEffect } from 'react';",
      "",
      "const $TM_FILENAME_BASE = () => {",
      "",
      "};",
      "",
      "export default $TM_FILENAME_BASE;"
    ]
  },
  "Create reducer": {
    "prefix": "credux",
    "body": [
      "import { createSlice, createAction } from '@reduxjs/toolkit';",
      "",
      "const initialState = {",
      " data: {},",
      " isLoading: false,",
      "};",
      "",
      "const { actions, reducer } = createSlice({",
      " name: '',",
      " initialState,",
      " reducers: {",
      "    getBrandsSuccess: (state, { payload }) => {",
      "      state.data = payload;",
      "    },",
      "    setLoading: (state, { payload }) => {",
      "      state.isLoading = payload;",
      "    },",
      "  },",
      "});",
      "",
      "export const getBrands = createAction('Brands/getBrands');",
      "export const changeStatusBrand = createAction('Brands/changeStatusBrand');",
      "export const { getBrandsSuccess setLoading } = actions;",
      "export default reducer;"
    ]
  },
  "Create component 2": {
    "prefix": "rafcp",
    "body": [
      "import React from 'react';",
      "import styled from 'styled-components';",
      "",
      "export const Styled$TM_FILENAME_BASE = styled.div`",
      " ",
      "`;",
      "const $TM_FILENAME_BASE = () => {",
      "  return <Styled$TM_FILENAME_BASE> Hello $TM_FILENAME_BASE</Styled$TM_FILENAME_BASE>;",
      "};",
      "",
      "$TM_FILENAME_BASE.propTypes = {};",
      "",
      "$TM_FILENAME_BASE.defaultProps = {};",
      "",
      "export default $TM_FILENAME_BASE;"
    ]
  },
  "Export default": {
    "prefix": "export default",
    "body": ["export default $TM_FILENAME_BASE;"]
  },
  "React native shadwo": {
    "prefix": "shadow",
    "body": [
      "shadow-color: #000;",
      "shadow-offset: 0px 2px;",
      "shadow-opacity: 0.4;",
      "shadow-radius: 2px;",
      "elevation: 6;"
    ]
  },
  "Create react native": {
    "prefix": "rn",
    "body": [
      "import React from 'react';",
      "import {View, Text} from 'react-native';",
      "",
      "const $TM_FILENAME_BASE = () => {",
      "  return <View><Text> Hello $TM_FILENAME_BASE </Text></View>;",
      "};",
      "",
      "$TM_FILENAME_BASE.propTypes = {};",
      "",
      "$TM_FILENAME_BASE.defaultProps = {};",
      "",
      "export default $TM_FILENAME_BASE;"
    ]
  },
  "MarkDownRemark Query": {
    "prefix": "useStaticQueryMarkdown",
    "body": [
      "const { sideProjects } = useStaticQuery(graphql`",
      " query  {",
      "   sideProjects: allMarkdownRemark(",
      "     filter: {",
      "       frontmatter: { template: { eq: 'blog' }, draft: { ne: true } }",
      "     }",
      "     sort: { order: DESC, fields: [frontmatter___date] }",
      "     limit: 11",
      " ) {",
      " edges {",
      "   node {",
      "      excerpt(pruneLength: 230)",
      "      fields {",
      "        slug",
      "     }",
      "     frontmatter {",
      "        title",
      "        date(formatString: 'MMM DD, YYYY')",
      "        thumbnail",
      "        description",
      "        tags",
      "        author",
      "      }",
      "    }",
      "  }",
      "}",
      "`);"
    ]
  },
  //-----------------Unitily classs-----------------
  "text-align: left;": {
    "prefix": "text",
    "body": ["text-left"]
  },
  //-----------------SNIPPETS FOR EXPRESS------------
  "Default Props": {
    "prefix": "def",
    "body": ["defaultProps = {", "//", "}; "]
  },
  "require": {
    "prefix": "require",
    "body": ["const name = require('module');"]
  },
  "schema": {
    "prefix": "schema",
    "body": [
      "const mongoose = require('mongoose');",
      "",
      "const index = new mongoose.Schema({",
      "",
      "});",
      "",
      "module.exports = mongoose.model('', index);"
    ]
  },
  "app.post('/', (req, res) => {}": {
    "prefix": "app.post",
    "body": ["app.post('/', (req, res) => {", "", "});"]
  },
  "body-parser": {
    "prefix": "body-parser",
    "body": [
      "const bodyParser = require('body-parser');",
      "",
      "app.use(bodyParser.json());",
      ""
    ]
  },
  "app.listen": {
    "prefix": "app.listen",
    "body": [
      "const { PORT = 5000 } = process.env;",
      "app.listen(PORT, () => console.log(`Server started on port ${PORT}`));"
    ]
  },
  "app.get": {
    "prefix": "app.get",
    "body": ["app.get('/', (req, res) => {", "", "});"]
  },
  //-----------------SNIPPETS FOR REDUX------------
  "Redux saga": {
    "prefix": "rxsaga",
    "body": [
      "import { takeEvery, put, take } from 'redux-saga/effects';",
      "import {",
      " action",
      "} from './actions';",
      "",
      "function* saga() {",
      " try {",
      "   yield put(action);",
      " } catch (e) {",
      "   yield put(getAllContactFailureAction());",
      " }",
      "}",
      "",
      "export default [",
      " takeEvery(YourTypes.YOUR_TYPES, saga),",
      "];"
    ]
  },
  //-----------------SNIPPETS FOR REACT------------

  "import styled from 'styled-component' ": {
    "prefix": "ims",
    "body": [
      "import styled from 'styled-components'; ",
      "",
      "export const Styled$TM_FILENAME_BASE = styled.div`",
      " //code hear",
      "`;"
    ]
  },
  "Proptypes": {
    "prefix": "prop",
    "body": ["propTypes = {", "", "};"]
  },
  //-----------------SNIPPETS FOR ANT DESIGN--------
  "<Button type='' onClick={}></Button>": {
    "prefix": "ant-btn",
    "body": ["<Button type='primary' onClick={}></Button>"]
  },
  //-----------------SNIPPETS FOR JAVASCRIPT-------------
  "console.log ": {
    "prefix": "log",
    "body": ["console.log('log--', )"]
  },
  "document.getElementById()": {
    "prefix": "getid",
    "body": ["document.getElementById("]
  },
  //-----------------SNIPPETS FOR SCSS/CSS-------------
  "CSS RESET": {
    "prefix": "cssreset",
    "body": [
      "html {",
      "box-sizing: border-box;",
      "}",
      "*,",
      "*::before,",
      "*::after {",
      " box-sizing: inherit;",
      "}",
      "body,",
      "h1,",
      "h2,",
      "h3,",
      "h4,",
      "h5,",
      "h6,",
      "ul,",
      "ol,",
      "li,",
      "p,",
      "pre,",
      "blockquote,",
      "figure,",
      "img,",
      "hr {",
      " margin: 0;",
      " padding: 0;",
      "}",
      "",
      "ul {",
      " list-style: none;",
      "}",
      "",
      "embed,",
      "iframe,",
      "img,",
      "object,",
      "video {",
      " display: block;",
      " max-width: 100%;",
      "}",
      "",
      "table {",
      " table-layout: fixed;",
      " width: 100%;",
      "}",
      "",
      "[hidden] {",
      " display: none;",
      "}",
      "html,",
      "body {",
      " font-size: 80%;",
      " @media (min-width: 576px) {",
      "   font-size: 90%;",
      " }",
      " @media (min-width: 768px) {",
      " font-size: 90%;",
      " }",
      " @media (min-width: 992px) {",
      " font-size: 90%;",
      " }",
      " @media (min-width: 1200px) {",
      " font-size: 100%;",
      " }",
      " @media (min-width: 1600px) {",
      "   font-size: 133.33333%;",
      " }",
      "}"
    ]
  },
  "flex-center": {
    "prefix": "flex-center",
    "body": [
      "display: flex;",
      "align-items: center;",
      "justify-content: center;"
    ]
  },
  "font-face": {
    "prefix": "font-face",
    "body": [
      "@font-face {",
      "  font-family: 'Poppins-Regular';",
      "  src: url('../assets/fonts/');",
      "}"
    ]
  },
  "@media": {
    "prefix": "media",
    "body": [
      "@media (min-width: 576px)  { ... }",
      "@media (min-width: 768px)  { ... }",
      "@media (min-width: 992px)  { ... }",
      "@media (min-width: 1200px) { ... }"
    ]
  },
  //--------------------COLOR-----------------------------
  "Styled Component": {
    "prefix": "#fff",
    "body": ["${props => props.theme.palette.formPrimaryColor}"]
  },
  "${props => props.theme.palette.primary};": {
    "prefix": "primary",
    "body": ["${props => props.theme.palette.primary};"]
  },
  //-------------------i18next-----------------------------
  "i18next.t('')": {
    "prefix": "i18n",
    "body": ["i18next.t('')"]
  },
  "onClick={handleOnlick}": {
    "prefix": "onClick",
    "body": ["onClick={handleClick}"]
  },
  "const handleClick = () => {": {
    "prefix": "handleClick",
    "body": ["const handleClick = () => {", "", "};"]
  },
  "const handleChange = () => {": {
    "prefix": "handleChange",
    "body": ["const handleChange = () => {", "", "};"]
  }
}
